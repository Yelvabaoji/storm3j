buildscript {
    ext.bouncycastleVersion = '1.61'
    ext.jacksonVersion = '2.8.5'
    ext.javapoetVersion = '1.7.0'
    ext.jnr_unixsocketVersion = '0.21'
    ext.okhttpVersion = '3.8.1'
    ext.rxjavaVersion = '2.2.2'
    ext.slf4jVersion = '1.7.25'
    ext.javaWebSocketVersion = '1.3.8'
    ext.picocliVersion = '3.0.0'

    // test dependencies
    ext.equalsverifierVersion = '2.1.7'
    ext.junitVersion = '4.11'
    ext.junitBenchmarkVersion = '0.7.2'
    ext.logbackVersion = '1.2.3'
    ext.mockitoVersion = '1.10.19'

    repositories { mavenCentral() }

    dependencies {
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    }
}

plugins {
    id "com.jfrog.bintray" version "1.8.4"
    id 'com.diffplug.gradle.spotless' version '3.23.1'

    // Required for JFrog Artifactory repository
    id 'jacoco'
    id 'maven-publish'

    // Required for Maven Nexus repository
    id 'maven'
    id 'signing'
    id 'idea'
}

apply plugin: 'java'
apply plugin: 'idea'
// should only be applied to the root project, see
// https://github.com/Codearte/gradle-nexus-staging-plugin#multi-project-build
apply plugin: 'io.codearte.nexus-staging'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'

description 'storm3j base project'

allprojects {

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    apply plugin: 'java'
    apply plugin: 'jacoco'

    apply plugin: 'com.diffplug.gradle.spotless'

    buildDir = "$rootDir/build"

    repositories { mavenCentral() }

    // We don't want any compiler warnings
    compileJava {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
    compileTestJava {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    javadoc { options.encoding = 'UTF-8' }

    jacoco { toolVersion = '0.7.7.201606060606' // See http://www.eclemma.org/jacoco/.
    }

    jacocoTestReport {
        reports { xml.enabled true }
    }

    tasks.withType(Test) {
        reports.html.destination = file("${reporting.baseDir}/${name}")
    }
}

subprojects {
    apply plugin: 'java'

    dependencies {
        testCompile "junit:junit:$junitVersion",
                "org.mockito:mockito-core:$mockitoVersion"
    }
}

configure(subprojects.findAll { it.name != 'integration-tests' }) {
    // Required for Maven Nexus repository
    apply plugin: 'maven'
    apply plugin: 'signing'

    // Required for JFrog Artifactory repository
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task testJar(type: Jar) {
        classifier = 'tests'
        from sourceSets.test.output
    }

    artifacts { archives sourcesJar, javadocJar, testJar }

    ext {
        ossrhUsername = project.hasProperty('ossrhUsername') ? project.property('ossrhUsername') : System.getenv('OSSRH_USERNAME')
        ossrhPassword = project.hasProperty('ossrhPassword') ? project.property('ossrhPassword') : System.getenv('OSSRH_PASSWORD')
        ossrhRepoUrl = project.hasProperty('ossrhRepoUrl') ? project.property('ossrhRepoUrl') : System.getenv('OSSRH_REPO_URL')
        bintrayUser = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
        bintrayKey = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
        bintrayGpgPassphrase = project.hasProperty('bintrayGpgPassphrase') ? project.property('bintrayGpgPassphrase') : System.getenv('BINTRAY_GPG_PASSPHRASE')
        isSnapshotVersion = project.version.endsWith("-SNAPSHOT")
        manualRelease = project.hasProperty('manualRelease') ? project.property('manualRelease').toBoolean() : false
    }

    bintray {
        publications = ['mavenJava']
        publish = true
        pkg {
            repo = 'maven'
            name = 'org.storm3j'
            desc = project.description
            userOrg = 'storm3j'
            licenses = ['Apache-2.0']
            issueTrackerUrl = 'https://github.com/filestorm-fst/storm3j/issues'
            vcsUrl = 'https://github.com/filestorm-fst/storm3j'
            websiteUrl = 'http://filestorm.info/#/home'
            publicDownloadNumbers = true
        }
    }


    task jacocoRootTestReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
        dependsOn = subprojects.test
        additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
        classDirectories = files(subprojects.sourceSets.main.output)
        executionData = files(subprojects.jacocoTestReport.executionData)
        reports { xml.enabled = true }

        onlyIf = { true }

        doFirst {
            executionData = files(executionData.findAll { it.exists() })
        }

        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it,
                        exclude: [
                                'org/storm3j/abi/datatypes/generated/**',
                                'org/storm3j/tuples/generated/**',
                                'org/storm3j/ens/contracts/generated/**'
                        ])
            })
        }
    }
}
